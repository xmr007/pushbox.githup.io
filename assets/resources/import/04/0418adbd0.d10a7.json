[1,["7bU0o/iBlDpYfcXVWmhpEX"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,3],[1,0,1,2,4]],[[[[0,"waterSpread",{"0":{"props":{"wave_radius":0.2,"wave_offset":2},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[0]],[[[1,"waterSpread",[{"hash":1872641853,"record":null,"name":"waterSpread|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS{\n  vec2 center;\n  vec2 canvas_size;\n  float wave_radius;\n  float wave_offset;\n};\nvoid main() {\n  vec2 distance_vec = center - v_uv0;\n  distance_vec = distance_vec * vec2(canvas_size.x / canvas_size.y, 1.0);\n  float distance = sqrt(distance_vec.x * distance_vec.x + distance_vec.y * distance_vec.y);\n  float sin_factor = sin(distance * 100.0 + cc_time.x) * 0.05;\n  float discard_factor = clamp(wave_radius - abs(wave_offset - distance), 0.0, 1.0);\n  vec2 offset = normalize(distance_vec) * sin_factor * discard_factor;\n  vec2 uv = offset + v_uv0;\n  gl_FragColor = texture(texture, uv);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 center;\nuniform vec2 canvas_size;\nuniform float wave_radius;\nuniform float wave_offset;\nvoid main() {\n  vec2 distance_vec = center - v_uv0;\n  distance_vec = distance_vec * vec2(canvas_size.x / canvas_size.y, 1.0);\n  float distance = sqrt(distance_vec.x * distance_vec.x + distance_vec.y * distance_vec.y);\n  float sin_factor = sin(distance * 100.0 + cc_time.x) * 0.05;\n  float discard_factor = clamp(wave_radius - abs(wave_offset - distance), 0.0, 1.0);\n  vec2 offset = normalize(distance_vec) * sin_factor * discard_factor;\n  vec2 uv = offset + v_uv0;\n  gl_FragColor = texture2D(texture, uv);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ARGS","binding":1,"members":[{"name":"center","type":14,"count":1},{"name":"canvas_size","type":14,"count":1},{"name":"wave_radius","type":13,"count":1},{"name":"wave_offset","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"waterSpread|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"canvas_size":{"type":14,"value":[667,375]},"center":{"type":14,"value":[0.5,0.5]},"wave_radius":{"type":13,"value":[0.18]},"wave_offset":{"type":13,"value":[2]}}}]}]]],0,0,[],[],[]]]]